package codigoa2;

import static codigoa2.MostrarPedidosDiseñador.cajaNumero;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jesus
 */
public class PedidosTiempoReal extends javax.swing.JFrame {

    /**
     * Creates new form PedidosTiempoReal
     */
    public PedidosTiempoReal() {

        initComponents();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.setTitle("PedidosSupervisor");
        this.setResizable(false);

         HiloSupervisor33 o1 = new HiloSupervisor33();
         o1.start();
       // o1.start();*/
         //hilo.start();
    }

    public class HiloSupervisor33 extends Thread {

        @Override
        public void run() {
            Runnable runnable = new Runnable() {
                @Override
                public void run() {
                    // Esto se ejecuta en segundo plano una única vez
                    while (true) {
                        //Ocurre siempre
                        try {
                            //Hilo se duerme cada 5 mil mili segundos
                            Thread.sleep(5000);//Si ponemos 1000 es cada segundo
                            // Y después realizamos las operaciones
                            System.out.println("Me actualizo cada 5 segundos\n");// Imprimo mensaje en consola
                            /*PedidosTiempoReal objeto = new PedidosTiempoReal();
                             objeto.setVisible(false);*/

                            //Hago solicitod a la base de datos que ejecute query cada 5 segundos
                            try {
                                DefaultTableModel modelo = new DefaultTableModel();
                                tabla69.setModel(modelo);

                                PreparedStatement ps = null;
                                
                                ResultSet resultado1 = null;
                               
                                Conexion conn = new Conexion();
                                Connection con = conn.getConexion();

                                //String buscar  con el valor de = caja1.getText();
                                //
                                String sql = "SELECT NumeroEmpleado,id_pedido_empleado,Id_arreglo,Estatus,Tiempo_estimado,hora_inicio,hora_termino FROM pedidos_empleado";
                                ps = con.prepareStatement(sql);

                                resultado1 = ps.executeQuery();

                                ResultSetMetaData rsMd = (ResultSetMetaData) resultado1.getMetaData();
                                int cantidadColumnas = rsMd.getColumnCount();

                                modelo.addColumn("NumeroEmpleado");
                                modelo.addColumn("id_pedido_empleado");
                                modelo.addColumn("Id_arreglo");
                                modelo.addColumn("Estatus");
                                modelo.addColumn("Tiempo_estimado");
                                modelo.addColumn("hora_inicio");
                                modelo.addColumn("hora_termino");

                                while (resultado1.next()) {
                                    Object[] filas = new Object[cantidadColumnas];
                                    for (int i = 0; i < cantidadColumnas; i++) {
                                        filas[i] = resultado1.getObject(i + 1);
                                    }
                                    modelo.addRow(filas);

                                }

                            } catch (SQLException error) {
                                System.out.println("Error de Conexion89");
                                System.err.println(error.toString());
                            }

//Termina solicitud base de datos
                            // Manejo de excepciones
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            };
            // Creamos  hilo y le pasamos  runnable
            Thread hilo = new Thread(runnable);
            hilo.start();

            // Y aquí podemos hacer cualquier cosa, en el hilo principal del programa
            //System.out.println("Yo imprimo en el hilo principal");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla69 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cajaConsulta = new javax.swing.JTextField();
        botonBuscar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla70 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabla69.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NumeroEmpleado", "id_pedido_empleado", "Id_arreglo", "Estatus", "Tiempo_estimado", "hora_inicio", "hora_termino"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla69);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        jLabel1.setText("Bienvenido Supervisor");

        jLabel2.setText("Se encuentra observando todos los pedidos en tiempo real.");

        jLabel3.setText("Debe esperar 5 segundos para que la tabla muestre información.  ");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel4.setText("Filtrar Pedido por \"Estatus\"");

        jLabel5.setText("Escriba el \"Estatus\" del pedido para filtrar la actualización.");

        jLabel6.setText("Ejemplo: \"Terminado\"");

        botonBuscar.setText("Filtrar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel7.setText("En la siguente tabla se mostrará  la búsqueda con Filtros: ");

        tabla70.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NumeroEmpleado", "id_pedido_empleado", "Id_arreglo", "Estatus", "Tiempo_estimado", "hora_inicio", "hora_termino"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabla70);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cajaConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonBuscar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cajaConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonBuscar))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        // Boton Filtrar
        DefaultTableModel modelo = new DefaultTableModel();
        tabla70.setModel(modelo);

        try {
            PreparedStatement ps = null;
            ResultSet resultado1 = null;
            Conexion conn = new Conexion();
            Connection con = conn.getConexion();
            ps = con.prepareStatement("SELECT NumeroEmpleado,id_pedido_empleado,Id_arreglo,Estatus,Tiempo_estimado,hora_inicio,hora_termino FROM pedidos_empleado WHERE Estatus LIKE ?");
            ps.setString(1, cajaConsulta.getText() + "%");
            resultado1 = ps.executeQuery();
            ResultSetMetaData rsMd = (ResultSetMetaData) resultado1.getMetaData();
            int cantidadColumnas = rsMd.getColumnCount();

            if (resultado1.next()) {

                modelo.addColumn("Id_arreglo");
                modelo.addColumn("NombreArreglo");
                modelo.addColumn("Costo");
                modelo.addColumn("Tiempo_elaboracion");
                modelo.addColumn("Comision");
                resultado1 = ps.executeQuery();

                while (resultado1.next()) {
                    Object[] filas = new Object[cantidadColumnas];
                    for (int i = 0; i < cantidadColumnas; i++) {
                        filas[i] = resultado1.getObject(i + 1);
                    }
                    modelo.addRow(filas);

                }

            }

        } catch (SQLException error) {
            System.out.println("Error3");
            System.err.println(error.toString());
        }
        
        
        
        
        
        
        
    }//GEN-LAST:event_botonBuscarActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PedidosTiempoReal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PedidosTiempoReal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PedidosTiempoReal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PedidosTiempoReal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PedidosTiempoReal().setVisible(true);
   
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBuscar;
    private javax.swing.JTextField cajaConsulta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabla69;
    private javax.swing.JTable tabla70;
    // End of variables declaration//GEN-END:variables
}
